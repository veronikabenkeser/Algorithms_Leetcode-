/*
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.

*/

class Solution {
    public int minPathSum(int[][] grid) {
        boolean[][] cache = new boolean[grid.length][grid[0].length];
        fillMinPath(grid,cache, 0, 0, grid.length-1, grid[0].length-1);
        return grid[0][0];
    }
    
    public int fillMinPath(int[][] grid, boolean[][] cache, int row, int col, int endRow, int endCol){
        if(row < 0 || row  >= grid.length || col < 0 || col >= grid[0].length){
            return 10000000;
        }
        if(row == endRow && col ==endCol){
            return grid[row][col];
        }
        
        //memoization, the val of each square is computed once.
        if(cache[row][col]){
            return grid[row][col];
        }
        cache[row][col]=true;
        grid[row][col] += Math.min(fillMinPath(grid, cache, row+1, col, endRow, endCol), fillMinPath(grid, cache, row, col+1, endRow, endCol));
        return grid[row][col];
    }
}
