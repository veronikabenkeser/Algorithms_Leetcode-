/*
Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
*/

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> temp  = new ArrayList<>();
        for(int k=0; k<= nums.length; k++){
             findSubsets(0, k, nums, res, temp);
        }
        return res;
    }
    public void findSubsets(int currentI, int len, int[] nums, List<List<Integer>> res,  List<Integer> temp){
        if(temp.size() == len){
            res.add(new ArrayList<Integer>(temp));
            return;
        }
        if(currentI>=nums.length){
            return;
        }
        temp.add(nums[currentI]);
        findSubsets(currentI+1, len, nums, res, temp);
        
        //undo
        temp.remove(temp.size()-1);
        findSubsets(currentI+1, len, nums, res, temp);
    }
}
