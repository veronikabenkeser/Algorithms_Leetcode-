/** 
Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
*/

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        findPerms(nums, 0, result);
        return result;
    }
    
    public void findPerms(int[] nums, int startI, List<List<Integer>> result){
        if(startI >= nums.length){
            List<Integer> temp = convertToArrayList(nums);
            result.add(temp);
            return;
        }
        
        for(int i=startI; i< nums.length; i++){
            //make a different letter appear first
            swap(nums, startI, i);
            
            findPerms(nums, startI+1, result);
            
            //undo
            swap(nums, startI, i);
        }
        
    }
    
    public void swap(int[] arr, int first, int second){
        int temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }
    
    public List<Integer> convertToArrayList(int[] arr){
        List<Integer> list = new ArrayList<>();
        
        for(int i=0; i< arr.length; i++){
            list.add(arr[i]);
        }
        return list;
    }
}
