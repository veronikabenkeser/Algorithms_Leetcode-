/*

Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Example 1:

Input: [1,3,5,6], 5
Output: 2
Example 2:

Input: [1,3,5,6], 2
Output: 1
Example 3:

Input: [1,3,5,6], 7
Output: 4
Example 4:

Input: [1,3,5,6], 0
Output: 0

*/

class Solution {
    public int searchInsert(int[] nums, int target) {
        int low = 0;
        int high = nums.length-1;
        return searchHelper(nums, target, low, high);
    }
    
    public int searchHelper(int[] nums, int target, int low, int high){
        int mid = low + (high-low)/2;
        
        //return insertion point since the element does not exist in the array
        if(low>high){
            return low;
        }
        
        //return the point where element exists, if it exists in the array
        if(target == nums[mid]){
            return mid;
        }
        if(nums[mid] > target){
            return searchHelper(nums, target, low, mid-1);
        }
        return searchHelper(nums, target, mid+1, high);
    }
}
